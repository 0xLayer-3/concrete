name: Continuous Integration Pipeline

on:
  push:
    branches: [main, test-ci]
    tags:
      - 'v*'
  pull_request:
    types: [opened, synchronize, reopened]

# DOCKER_IMAGE variables aren't used in BuildAndPushDockerImages because of https://github.com/actions/runner/issues/480
env:
  DOCKER_IMAGE_TEST: ghcr.io/zama-ai/concrete-compiler
  THIS_FILE: .github/workflows/continuous-integration.yml

jobs:
  #################
  # Docker Images #
  #################

  BuildAndPushDockerImages:
    if: ${{ github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main') || needs.BuildAndPublishHPXDockerImage.outputs.image_built == 'true' || needs.BuildAndPublishCUDADockerImage.outputs.image_built == 'true' }}
    needs: [BuildAndPublishHPXDockerImage, BuildAndPublishCUDADockerImage]
    name: Build & Publish Docker Images
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - name: test-env
            image: ghcr.io/zama-ai/concrete-compiler
            dockerfile: builders/Dockerfile.concrete-compiler-env

    steps:
      # A SSH private key is required as some dependencies are from private repos
      - uses: webfactory/ssh-agent@v0.6.0
        with:
          ssh-private-key: ${{ secrets.CONCRETE_COMPILER_CI_SSH_PRIVATE }}

      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GH_TOKEN }}

      - name: Login to Registry
        run: echo "${{ secrets.GHCR_PASSWORD }}" | docker login -u ${{ secrets.GHCR_LOGIN }} --password-stdin ghcr.io

      # label was initially a need from the frontend CI
      - name: Build Image
        run: |
          DOCKER_BUILDKIT=1 docker build --no-cache \
            --ssh default=${{ env.SSH_AUTH_SOCK }} \
            --label "commit-sha=${{ github.sha }}" -t ${{ matrix.image }} -f ${{ matrix.dockerfile }} .

      - name: Tag and Publish Image
        run: |
          docker image tag ${{ matrix.image }} ${{ matrix.image }}:${{ github.sha }}
          docker image push ${{ matrix.image }}:latest
          docker image push ${{ matrix.image }}:${{ github.sha }}

      - name: Tag and Publish Release Image
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          docker image tag ${{ matrix.image }} ${{ matrix.image }}:${{ github.ref_name }}
          docker image push ${{ matrix.image }}:${{ github.ref_name }}

  BuildAndPublishHPXDockerImage:
    name: Build & Publish HPX Docker Image
    runs-on: ubuntu-20.04
    env:
      IMAGE: ghcr.io/zama-ai/hpx
    outputs:
      image_built: ${{ steps.is-built.outputs.IMAGE_BUILT }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v32

      - name: Login
        id: login
        if: contains(steps.changed-files.outputs.modified_files, 'builders/Dockerfile.hpx-env') || contains(steps.changed-files.outputs.modified_files, env.THIS_FILE)
        run: echo "${{ secrets.GHCR_PASSWORD }}" | docker login -u ${{ secrets.GHCR_LOGIN }} --password-stdin ghcr.io

      - name: Build Tag and Publish
        if: ${{ steps.login.conclusion != 'skipped' }}
        run: |
          docker build -t "${IMAGE}" -f builders/Dockerfile.hpx-env .
          docker push "${IMAGE}:latest"

      - name: Is Image Built
        id: is-built
        run: echo "::set-output name=IMAGE_BUILT::${{ contains(steps.changed-files.outputs.modified_files, 'builders/Dockerfile.hpx-env') }}"

  BuildAndPublishCUDADockerImage:
    name: Build & Publish CUDA Docker Image
    runs-on: ubuntu-20.04
    env:
      IMAGE: ghcr.io/zama-ai/cuda
      TAG: "11-7"
    outputs:
      image_built: ${{ steps.is-built.outputs.IMAGE_BUILT }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v32

      - name: Login
        id: login
        if: contains(steps.changed-files.outputs.modified_files, 'builders/Dockerfile.cuda-env') || contains(steps.changed-files.outputs.modified_files, env.THIS_FILE)
        run: echo "${{ secrets.GHCR_PASSWORD }}" | docker login -u ${{ secrets.GHCR_LOGIN }} --password-stdin ghcr.io

      - name: Build Tag and Publish
        if: ${{ steps.login.conclusion != 'skipped' }}
        run: |
          docker build -t "${IMAGE}" -f builders/Dockerfile.cuda-env .
          docker image tag "${IMAGE}" "${IMAGE}:${TAG}"
          docker push "${IMAGE}:latest"
          docker push "${IMAGE}:${TAG}"

      - name: Is Image Built
        id: is-built
        run: echo "::set-output name=IMAGE_BUILT::${{ contains(steps.changed-files.outputs.modified_files, 'builders/Dockerfile.cuda-env') }}"
