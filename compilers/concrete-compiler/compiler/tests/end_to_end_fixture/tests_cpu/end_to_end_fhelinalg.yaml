description: add_eint_int_term_to_term
program: |
  // Returns the term to term addition of `%a0` with `%a1`
  func.func @main(%a0: tensor<4x!FHE.eint<6>>, %a1: tensor<4xi7>) -> tensor<4x!FHE.eint<6>> {
    %res = "FHELinalg.add_eint_int"(%a0, %a1) : (tensor<4x!FHE.eint<6>>, tensor<4xi7>) -> tensor<4x!FHE.eint<6>>
    return %res : tensor<4x!FHE.eint<6>>
  }
tests:
  - inputs:
    - tensor: [31, 6, 12, 9]
      shape: [4]
      width: 8
    - tensor: [32, 9, 2, 3]
      shape: [4]
      width: 8
    outputs:
    - tensor: [63, 15, 14, 12]
      shape: [4]
---
description: add_eint_int_term_to_term_16bits
program: |
  // Returns the term to term addition of `%a0` with `%a1`
  func.func @main(%a0: tensor<7x!FHE.eint<16>>, %a1: tensor<7xi17>) -> tensor<7x!FHE.eint<16>> {
    %res = "FHELinalg.add_eint_int"(%a0, %a1) : (tensor<7x!FHE.eint<16>>, tensor<7xi17>) -> tensor<7x!FHE.eint<16>>
    return %res : tensor<7x!FHE.eint<16>>
  }
tests:
  - inputs:
    - tensor: [32767, 0, 10212, 1276, 55, 24000, 1766]
      shape: [7]
    - tensor: [32768, 0, 3, 20967, 57, 123, 31000]
      shape: [7]
    outputs:
    - tensor: [65535, 0, 10215, 22243, 112, 24123, 32766]
      shape: [7]
---
description: add_eint_term_to_term
program: |
  func.func @main(%a0: tensor<4x!FHE.eint<6>>, %a1: tensor<4x!FHE.eint<6>>) -> tensor<4x!FHE.eint<6>> {
    %res = "FHELinalg.add_eint"(%a0, %a1) : (tensor<4x!FHE.eint<6>>, tensor<4x!FHE.eint<6>>) -> tensor<4x!FHE.eint<6>>
    return %res : tensor<4x!FHE.eint<6>>
  }
tests:
  - inputs:
    - tensor: [31, 6, 12, 9]
      shape: [4]
    - tensor: [32, 9, 2, 3]
      shape: [4]
    outputs:
    - tensor: [63, 15, 14, 12]
      shape: [4]
---
description: add_eint_term_to_term_16bits
program: |
  func.func @main(%a0: tensor<4x!FHE.eint<16>>, %a1: tensor<4x!FHE.eint<16>>) -> tensor<4x!FHE.eint<16>> {
    %res = "FHELinalg.add_eint"(%a0, %a1) : (tensor<4x!FHE.eint<16>>, tensor<4x!FHE.eint<16>>) -> tensor<4x!FHE.eint<16>>
    return %res : tensor<4x!FHE.eint<16>>
  }
tests:
  - inputs:
    - tensor: [32767, 1276, 10212, 0]
      shape: [4]
    - tensor: [32768, 20967, 3, 0]
      shape: [4]
    outputs:
    - tensor: [65535, 22243, 10215, 0]
      shape: [4]
---
description: sub_int_eint_term_to_term
program: |
  // Returns the term to term substraction of `%a0` with `%a1`
  func.func @main(%a0: tensor<4xi5>, %a1: tensor<4x!FHE.eint<4>>) -> tensor<4x!FHE.eint<4>> {
    %res = "FHELinalg.sub_int_eint"(%a0, %a1) : (tensor<4xi5>, tensor<4x!FHE.eint<4>>) -> tensor<4x!FHE.eint<4>>
    return %res : tensor<4x!FHE.eint<4>>
  }
tests:
  - inputs:
    - tensor: [15, 9, 12, 9]
      shape: [4]
      width: 8
    - tensor: [15, 6, 2, 3]
      shape: [4]
      width: 8
    outputs:
    - tensor: [0, 3, 10, 6]
      shape: [4]
---
description: sub_int_eint_term_to_term_16bits
program: |
  // Returns the term to term substraction of `%a0` with `%a1`
  func.func @main(%a0: tensor<4xi17>, %a1: tensor<4x!FHE.eint<16>>) -> tensor<4x!FHE.eint<16>> {
    %res = "FHELinalg.sub_int_eint"(%a0, %a1) : (tensor<4xi17>, tensor<4x!FHE.eint<16>>) -> tensor<4x!FHE.eint<16>>
    return %res : tensor<4x!FHE.eint<16>>
  }
tests:
  - inputs:
    - tensor: [65535, 22243, 10215, 0]
      shape: [4]
    - tensor: [65535, 1276, 10212, 0]
      shape: [4]
    outputs:
    - tensor: [0, 20967, 3, 0]
      shape: [4]
---
description: sub_eint_int_term_to_term
program: |
  func.func @main(%a0: tensor<4xi5>, %a1: tensor<4x!FHE.eint<4>>) -> tensor<4x!FHE.eint<4>> {
    %res = "FHELinalg.sub_eint_int"(%a1, %a0) : (tensor<4x!FHE.eint<4>>, tensor<4xi5>) -> tensor<4x!FHE.eint<4>>
    return %res : tensor<4x!FHE.eint<4>>
  }
tests:
  - inputs:
    - tensor: [15, 6, 2, 3]
      shape: [4]
      width: 8
    - tensor: [15, 9, 12, 9]
      shape: [4]
      width: 8
    outputs:
    - tensor: [0, 3, 10, 6]
      shape: [4]
---
description: sub_eint_int_term_to_term_16bits
program: |
  func.func @main(%a0: tensor<4xi17>, %a1: tensor<4x!FHE.eint<16>>) -> tensor<4x!FHE.eint<16>> {
    %res = "FHELinalg.sub_eint_int"(%a1, %a0) : (tensor<4x!FHE.eint<16>>, tensor<4xi17>) -> tensor<4x!FHE.eint<16>>
    return %res : tensor<4x!FHE.eint<16>>
  }
tests:
  - inputs:
    - tensor: [65535, 1276, 10212, 0]
      shape: [4]
    - tensor: [65535, 22243, 10215, 0]
      shape: [4]
    outputs:
    - tensor: [0, 20967, 3, 0]
      shape: [4]
---
description: sub_eint_term_to_term
program: |
  func.func @main(%a0: tensor<4x!FHE.eint<6>>, %a1: tensor<4x!FHE.eint<6>>) -> tensor<4x!FHE.eint<6>> {
    %res = "FHELinalg.sub_eint"(%a0, %a1) : (tensor<4x!FHE.eint<6>>, tensor<4x!FHE.eint<6>>) -> tensor<4x!FHE.eint<6>>
    return %res : tensor<4x!FHE.eint<6>>
  }
tests:
  - inputs:
    - tensor: [31, 6, 12, 9]
      shape: [4]
      width: 8
    - tensor: [4, 2, 9, 3]
      shape: [4]
      width: 8
    outputs:
    - tensor: [27, 4, 3, 6]
      shape: [4]
---
description: sub_eint_term_to_term_16bits
program: |
  func.func @main(%a0: tensor<4x!FHE.eint<16>>, %a1: tensor<4x!FHE.eint<16>>) -> tensor<4x!FHE.eint<16>> {
    %res = "FHELinalg.sub_eint"(%a0, %a1) : (tensor<4x!FHE.eint<16>>, tensor<4x!FHE.eint<16>>) -> tensor<4x!FHE.eint<16>>
    return %res : tensor<4x!FHE.eint<16>>
  }
tests:
  - inputs:
    - tensor: [65535, 22243, 10215, 0]
      shape: [4]
    - tensor: [65535, 1276, 10212, 0]
      shape: [4]
    outputs:
    - tensor: [0, 20967, 3, 0]
      shape: [4]
---
description: mul_eint_int_term_to_term
program: |
  // Returns the term to term multiplication of `%a0` with `%a1`
  func.func @main(%a0: tensor<4x!FHE.eint<6>>, %a1: tensor<4xi7>) -> tensor<4x!FHE.eint<6>> {
    %res = "FHELinalg.mul_eint_int"(%a0, %a1) : (tensor<4x!FHE.eint<6>>, tensor<4xi7>) -> tensor<4x!FHE.eint<6>>
    return %res : tensor<4x!FHE.eint<6>>
  }
tests:
  - inputs:
    - tensor: [31, 6, 12, 9]
      shape: [4]
      width: 8
    - tensor: [2, 3, 2, 3]
      shape: [4]
      width: 8
    outputs:
    - tensor: [62, 18, 24, 27]
      shape: [4]
---
description: mul_eint_int_term_to_term_16bits
program: |
  // Returns the term to term multiplication of `%a0` with `%a1`
  func.func @main(%a0: tensor<4x!FHE.eint<16>>, %a1: tensor<4xi17>) -> tensor<4x!FHE.eint<16>> {
    %res = "FHELinalg.mul_eint_int"(%a0, %a1) : (tensor<4x!FHE.eint<16>>, tensor<4xi17>) -> tensor<4x!FHE.eint<16>>
    return %res : tensor<4x!FHE.eint<16>>
  }
tests:
  - inputs:
    - tensor: [1, 65535, 12, 0]
      shape: [4]
    - tensor: [65535, 1, 1987, 0]
      shape: [4]
    outputs:
    - tensor: [65535, 65535, 23844, 0]
      shape: [4]
---
description: mul_eint_term_to_term_6bits
program: |
  func.func @main(%a0: tensor<4x!FHE.eint<7>>, %a1: tensor<4x!FHE.eint<7>>) -> tensor<4x!FHE.eint<7>> {
    %res = "FHELinalg.mul_eint"(%a0, %a1) : (tensor<4x!FHE.eint<7>>, tensor<4x!FHE.eint<7>>) -> tensor<4x!FHE.eint<7>>
    return %res : tensor<4x!FHE.eint<7>>
  }
tests:
  - inputs:
      - tensor: [6, 3, 12, 9]
        shape: [4]
      - tensor: [10, 20, 2, 3]
        shape: [4]
    outputs:
      - tensor: [60, 60, 24, 27]
        shape: [4]
---
description: mul_eint_term_to_term_15bits
program: |
  func.func @main(%a0: tensor<4x!FHE.eint<16>>, %a1: tensor<4x!FHE.eint<16>>) -> tensor<4x!FHE.eint<16>> {
    %res = "FHELinalg.mul_eint"(%a0, %a1) : (tensor<4x!FHE.eint<16>>, tensor<4x!FHE.eint<16>>) -> tensor<4x!FHE.eint<16>>
    return %res : tensor<4x!FHE.eint<16>>
  }
tests:
  - inputs:
      - tensor: [300, 5, 30000, 0]
        shape: [4]
      - tensor: [100, 1, 1, 0]
        shape: [4]
    outputs:
      - tensor: [30000, 5, 30000, 0]
        shape: [4]
---
description: transpose1d
program: |
  func.func @main(%input: tensor<3x!FHE.eint<6>>) -> tensor<3x!FHE.eint<6>> {
    %1 = "FHELinalg.transpose"(%input): (tensor<3x!FHE.eint<6>>) ->
    tensor<3x!FHE.eint<6>> return %1 : tensor<3x!FHE.eint<6>>
  }
tests:
  - inputs:
    - tensor: [1, 2, 3]
      shape: [3]
      width: 8
    outputs:
    - tensor: [1, 2, 3]
      shape: [3]
---
description: transpose2d
program: |
  func.func @main(%input: tensor<3x2x!FHE.eint<6>>) -> tensor<2x3x!FHE.eint<6>> {
    %1 = "FHELinalg.transpose"(%input): (tensor<3x2x!FHE.eint<6>>) -> tensor<2x3x!FHE.eint<6>>
    return %1 : tensor<2x3x!FHE.eint<6>>
  }
tests:
  - inputs:
    - tensor: [1, 2, 3, 4, 5, 6]
      shape: [3, 2]
      width: 8
    outputs:
    - tensor: [1, 3, 5, 2, 4, 6]
      shape: [2, 3]
---
description: transpose3d
program: |
  func.func @main(%input: tensor<2x3x4x!FHE.eint<6>>) -> tensor<4x3x2x!FHE.eint<6>> {
    %1 = "FHELinalg.transpose"(%input): (tensor<2x3x4x!FHE.eint<6>>) -> tensor<4x3x2x!FHE.eint<6>>
    return %1 : tensor<4x3x2x!FHE.eint<6>>
  }
tests:
  - inputs:
      - tensor: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
        shape: [2, 3, 4]
    outputs:
      - tensor: [0, 12, 4, 16, 8, 20, 1, 13, 5, 17, 9, 21, 2, 14, 6, 18, 10, 22, 3, 15, 7, 19, 11, 23]
        shape: [4, 3, 2]
---
description: transpose3d_axes_102
program: |
  func.func @main(%input: tensor<2x3x4x!FHE.eint<6>>) -> tensor<3x2x4x!FHE.eint<6>> {
    %1 = "FHELinalg.transpose"(%input) { axes = [1, 0, 2] } : (tensor<2x3x4x!FHE.eint<6>>) -> tensor<3x2x4x!FHE.eint<6>>
    return %1 : tensor<3x2x4x!FHE.eint<6>>
  }
tests:
  - inputs:
      - tensor: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
        shape: [2, 3, 4]
    outputs:
      - tensor: [0, 1, 2, 3, 12, 13, 14, 15, 4, 5, 6, 7, 16, 17, 18, 19, 8, 9, 10, 11, 20, 21, 22, 23]
        shape: [3, 2, 4]
---
description: transpose3d_axes_120
program: |
  func.func @main(%input: tensor<2x3x4x!FHE.eint<6>>) -> tensor<3x4x2x!FHE.eint<6>> {
    %1 = "FHELinalg.transpose"(%input) { axes = [1, 2, 0] } : (tensor<2x3x4x!FHE.eint<6>>) -> tensor<3x4x2x!FHE.eint<6>>
    return %1 : tensor<3x4x2x!FHE.eint<6>>
  }
tests:
  - inputs:
      - tensor: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
        shape: [2, 3, 4]
    outputs:
      - tensor: [0, 12, 1, 13, 2, 14, 3, 15, 4, 16, 5, 17, 6, 18, 7, 19, 8, 20, 9, 21, 10, 22, 11, 23]
        shape: [3, 4, 2]
---
description: transpose3d_axes_021
program: |
  func.func @main(%input: tensor<2x3x4x!FHE.eint<6>>) -> tensor<2x4x3x!FHE.eint<6>> {
    %1 = "FHELinalg.transpose"(%input) { axes = [0, 2, 1] } : (tensor<2x3x4x!FHE.eint<6>>) -> tensor<2x4x3x!FHE.eint<6>>
    return %1 : tensor<2x4x3x!FHE.eint<6>>
  }
tests:
  - inputs:
      - tensor: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
        shape: [2, 3, 4]
    outputs:
      - tensor: [0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11, 12, 16, 20, 13, 17, 21, 14, 18, 22, 15, 19, 23]
        shape: [2, 4, 3]
---
description: transpose3d_axes_201
program: |
  func.func @main(%input: tensor<2x3x4x!FHE.eint<6>>) -> tensor<4x2x3x!FHE.eint<6>> {
    %1 = "FHELinalg.transpose"(%input) { axes = [2, 0, 1] } : (tensor<2x3x4x!FHE.eint<6>>) -> tensor<4x2x3x!FHE.eint<6>>
    return %1 : tensor<4x2x3x!FHE.eint<6>>
  }
tests:
  - inputs:
      - tensor: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
        shape: [2, 3, 4]
    outputs:
      - tensor: [0, 4, 8, 12, 16, 20, 1, 5, 9, 13, 17, 21, 2, 6, 10, 14, 18, 22, 3, 7, 11, 15, 19, 23]
        shape: [4, 2, 3]
---
description: transpose4d_axes_3021
program: |
  func.func @main(%input: tensor<2x3x4x5x!FHE.eint<6>>) -> tensor<5x2x4x3x!FHE.eint<6>> {
    %1 = "FHELinalg.transpose"(%input) { axes = [3, 0, 2, 1] } : (tensor<2x3x4x5x!FHE.eint<6>>) -> tensor<5x2x4x3x!FHE.eint<6>>
    return %1 : tensor<5x2x4x3x!FHE.eint<6>>
  }
tests:
  - inputs:
      - tensor: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
                 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
                 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
                 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
                 117, 118, 119]
        shape: [2, 3, 4, 5]
    outputs:
      - tensor: [0, 20, 40, 5, 25, 45, 10, 30, 50, 15, 35, 55, 60, 80, 100, 65, 85, 105, 70, 90, 110, 75, 95,
                 115, 1, 21, 41, 6, 26, 46, 11, 31, 51, 16, 36, 56, 61, 81, 101, 66, 86, 106, 71, 91, 111, 76,
                 96, 116, 2, 22, 42, 7, 27, 47, 12, 32, 52, 17, 37, 57, 62, 82, 102, 67, 87, 107, 72, 92, 112,
                 77, 97, 117, 3, 23, 43, 8, 28, 48, 13, 33, 53, 18, 38, 58, 63, 83, 103, 68, 88, 108, 73, 93, 113,
                 78, 98, 118, 4, 24, 44, 9, 29, 49, 14, 34, 54, 19, 39, 59, 64, 84, 104, 69, 89, 109, 74, 94, 114,
                 79, 99, 119]
        shape: [5, 2, 4, 3]
---
description: conv2dWithGroup1C
program: |
  func.func @main(%input: tensor<1x6x4x4x!FHE.eint<5>>, %weight: tensor<6x1x2x2xi6>) -> tensor<1x6x3x3x!FHE.eint<5>> {
    %1 = "FHELinalg.conv2d"(%input, %weight){group = 6 : i64}: (tensor<1x6x4x4x!FHE.eint<5>>, tensor<6x1x2x2xi6>) -> tensor<1x6x3x3x!FHE.eint<5>>
    return %1 : tensor<1x6x3x3x!FHE.eint<5>>
  }
tests:
  - inputs:
    - tensor: [
        1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
        1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
        1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
        1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
        ]
      shape: [1, 6, 4, 4]
      width: 8
    - tensor: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
      shape: [6, 1, 2, 2]
      width: 8
    outputs:
    - tensor: [10, 16, 22, 10, 16, 22, 10, 16, 22, 10, 16, 22, 10, 16, 22, 10, 16, 22,
        10, 16, 22, 10, 16, 22, 10, 16, 22, 10, 16, 22, 10, 16, 22, 10, 16, 22,
        10, 16, 22, 10, 16, 22, 10, 16, 22, 10, 16, 22, 10, 16, 22, 10, 16, 22]
      shape: [1, 6, 3, 3]
---
description: conv2dWithGroup2C
program: |
  func.func @main(%input: tensor<1x6x4x4x!FHE.eint<5>>, %weight: tensor<3x2x2x2xi6>) -> tensor<1x3x3x3x!FHE.eint<5>> {
    %1 = "FHELinalg.conv2d"(%input, %weight){group = 3 : i64}: (tensor<1x6x4x4x!FHE.eint<5>>, tensor<3x2x2x2xi6>) -> tensor<1x3x3x3x!FHE.eint<5>>
    return %1 : tensor<1x3x3x3x!FHE.eint<5>>
  }
tests:
  - inputs:
    - tensor: [
        1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
        1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
        1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
        1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,
        ]
      shape: [1, 6, 4, 4]
      width: 8
    - tensor: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
      shape: [3, 2, 2, 2]
      width: 8
    outputs:
    - tensor: [
        20, 32, 44, 20, 32, 44, 20, 32, 44, 20, 32, 44, 20, 32, 44, 20, 32, 44,
        20, 32, 44, 20, 32, 44, 20, 32, 44,
        ]
      shape: [1, 3, 3, 3]
---
description: maxpool2d_unsigned_1x1x8x10_kernel_3x2
program: |
  func.func @main(%arg0: tensor<1x1x8x10x!FHE.eint<5>>) -> tensor<1x1x6x9x!FHE.eint<5>> {
    %0 = "FHELinalg.maxpool2d"(%arg0) { kernel_shape = dense<[3, 2]> : tensor<2xi64> }
        : (tensor<1x1x8x10x!FHE.eint<5>>) -> tensor<1x1x6x9x!FHE.eint<5>>
    return %0 : tensor<1x1x6x9x!FHE.eint<5>>
  }
tests:
  - inputs:
      - tensor: [
           3,  3, 11,  9,  0,  3, 14, 10,  5,  6,
          10,  6,  4,  1, 10,  9, 11,  4,  0,  9,
           8,  4, 10, 12, 11, 10,  9,  3, 10,  2,
           8,  0, 11,  7,  5, 10,  8, 13,  9,  9,
           9,  1, 15,  0,  6,  8,  6,  6,  6,  3,
           6,  9, 10,  6,  0,  9, 13, 12,  6,  9,
          12, 13,  7, 15,  7,  1,  9,  3, 13,  6,
           2, 11, 14,  8, 11,  1, 11,  0,  0, 15,
        ]
        shape: [1, 1, 8, 10]
    outputs:
      - tensor: [
          10, 11, 12, 12, 11, 14, 14, 10, 10,
          10, 11, 12, 12, 11, 11, 13, 13, 10,
           9, 15, 15, 12, 11, 10, 13, 13, 10,
           9, 15, 15,  7, 10, 13, 13, 13,  9,
          13, 15, 15, 15,  9, 13, 13, 13, 13,
          13, 14, 15, 15, 11, 13, 13, 13, 15,
        ]
        shape: [1, 1, 6, 9]
---
description: maxpool2d_signed_1x1x6x5_kernel_2x3
program: |
  func.func @main(%arg0: tensor<1x1x6x5x!FHE.esint<6>>) -> tensor<1x1x5x3x!FHE.esint<6>> {
    %0 = "FHELinalg.maxpool2d"(%arg0) { kernel_shape = dense<[2, 3]> : tensor<2xi64> }
        : (tensor<1x1x6x5x!FHE.esint<6>>) -> tensor<1x1x5x3x!FHE.esint<6>>
    return %0 : tensor<1x1x5x3x!FHE.esint<6>>
  }
tests:
  - inputs:
      - tensor: [
           -8, -12,  -8, -12, -10,
            1,  -9, -15, -16,  14,
            9,  14,   2,   2, -15,
            9, -12,   0,  -4,  -5,
           -7, -11, -15,  -4,   6,
           15,  -3,   7, -13, -13,
        ]
        shape: [1, 1, 6, 5]
        signed: true
    outputs:
      - tensor: [
           1, -8, 14,
          14, 14, 14,
          14, 14,  2,
           9,  0,  6,
          15,  7,  7,
        ]
        shape: [1, 1, 5, 3]
        signed: true
