description: identity
program: |
  func @main(%arg0: !FHE.eint<3>) -> !FHE.eint<3> {
    return %arg0: !FHE.eint<3>
  }
tests:
  - inputs:
    - scalar: 1
    outputs:
    - scalar: 1
---
description: zero_tensor
program: |
  func @main() -> tensor<2x2x4x!FHE.eint<6>> {
    %0 = "FHE.zero_tensor"() : () -> tensor<2x2x4x!FHE.eint<6>>
    return %0 : tensor<2x2x4x!FHE.eint<6>>
  }
tests:
  - outputs:
    - tensor: [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      shape: [2,2,4]
---
description: add_eint_int_cst
program: |
  func @main(%arg0: !FHE.eint<2>) -> !FHE.eint<2> {
    %0 = arith.constant 1 : i3
    %1 = "FHE.add_eint_int"(%arg0, %0): (!FHE.eint<2>, i3) -> (!FHE.eint<2>)
    return %1: !FHE.eint<2>
  }
tests:
  - inputs:
    - scalar: 0
    outputs:
    - scalar: 1
  - inputs:
    - scalar: 1
    outputs:
    - scalar: 2
  - inputs:
    - scalar: 2
    outputs:
    - scalar: 3
  - inputs:
    - scalar: 3
    outputs:
    - scalar: 4
---
description: add_eint_int_arg
program: |
  func @main(%arg0: !FHE.eint<2>, %arg1: i3) -> !FHE.eint<2> {
    %1 = "FHE.add_eint_int"(%arg0, %arg1): (!FHE.eint<2>, i3) -> (!FHE.eint<2>)
    return %1: !FHE.eint<2>
  }
tests:
  - inputs:
    - scalar: 0
    - scalar: 1
    outputs:
    - scalar: 1
  - inputs:
    - scalar: 1
    - scalar: 2
    outputs:
    - scalar: 3
---
description: sub_int_eint_cst
program: |
  func @main(%arg0: !FHE.eint<2>) -> !FHE.eint<2> {
    %0 = arith.constant 7 : i3
    %1 = "FHE.sub_int_eint"(%0, %arg0): (i3, !FHE.eint<2>) -> (!FHE.eint<2>)
    return %1: !FHE.eint<2>
  }
tests:
  - inputs:
    - scalar: 1
    outputs:
    - scalar: 6
  - inputs:
    - scalar: 2
    outputs:
    - scalar: 5
  - inputs:
    - scalar: 3
    outputs:
    - scalar: 4
  - inputs:
    - scalar: 4
    outputs:
    - scalar: 3
---
description: sub_eint_int_cst
program: |
  func @main(%arg0: !FHE.eint<5>) -> !FHE.eint<5> {
    %0 = arith.constant 7 : i6
    %1 = "FHE.sub_eint_int"(%arg0, %0): (!FHE.eint<5>, i6) -> (!FHE.eint<5>)
    return %1: !FHE.eint<5>
  }
tests:
  - inputs:
      - scalar: 10
    outputs:
      - scalar: 3
  - inputs:
      - scalar: 7
    outputs:
      - scalar: 0
---
description: sub_eint_int_arg
program: |
  func @main(%arg0: !FHE.eint<4>, %arg1: i5) -> !FHE.eint<4> {
    %1 = "FHE.sub_eint_int"(%arg0, %arg1): (!FHE.eint<4>, i5) -> (!FHE.eint<4>)
    return %1: !FHE.eint<4>
  }
tests:
  - inputs:
      - scalar: 2
      - scalar: 2
    outputs:
      - scalar: 0
  - inputs:
      - scalar: 3
      - scalar: 1
    outputs:
      - scalar: 2
  - inputs:
      - scalar: 7
      - scalar: 4
    outputs:
      - scalar: 3
---
description: sub_eint
program: |
  func @main(%arg0: !FHE.eint<4>, %arg1: !FHE.eint<4>) -> !FHE.eint<4> {
    %1 = "FHE.sub_eint"(%arg0, %arg1): (!FHE.eint<4>, !FHE.eint<4>) -> (!FHE.eint<4>)
    return %1: !FHE.eint<4>
  }
tests:
  - inputs:
      - scalar: 2
      - scalar: 2
    outputs:
      - scalar: 0
  - inputs:
      - scalar: 3
      - scalar: 1
    outputs:
      - scalar: 2
  - inputs:
      - scalar: 7
      - scalar: 4
    outputs:
      - scalar: 3
---
description: sub_int_eint_arg
program: |
  func @main(%arg0: i3, %arg1: !FHE.eint<2>) -> !FHE.eint<2> {
    %1 = "FHE.sub_int_eint"(%arg0, %arg1): (i3, !FHE.eint<2>) -> (!FHE.eint<2>)
    return %1: !FHE.eint<2>
  }
tests:
  - inputs:
    - scalar: 2
    - scalar: 2
    outputs:
    - scalar: 0
  - inputs:
    - scalar: 2
    - scalar: 1
    outputs:
    - scalar: 1
  - inputs:
    - scalar: 7
    - scalar: 2
    outputs:
    - scalar: 5
---
description: neg_eint
program: |
  func @main(%arg0: !FHE.eint<7>) -> !FHE.eint<7> {
    %1 = "FHE.neg_eint"(%arg0): (!FHE.eint<7>) -> (!FHE.eint<7>)
    return %1: !FHE.eint<7>
  }
tests:
  - inputs:
    - scalar: 0
    outputs:
    - scalar: 0
  - inputs:
    - scalar: 1
    outputs:
    - scalar: 255
  - inputs:
    - scalar: 4
    outputs:
    - scalar: 252
  - inputs:
    - scalar: 250
    outputs:
    - scalar: 6
---
description: neg_eint_3bits
program: |
  func @main(%arg0: !FHE.eint<3>) -> !FHE.eint<3> {
    %1 = "FHE.neg_eint"(%arg0): (!FHE.eint<3>) -> (!FHE.eint<3>)
    return %1: !FHE.eint<3>
  }
tests:
  - inputs:
    - scalar: 0
    outputs:
    - scalar: 0
  - inputs:
    - scalar: 1
    outputs:
    - scalar: 15
  - inputs:
    - scalar: 4
    outputs:
    - scalar: 12
  - inputs:
    - scalar: 13
    outputs:
    - scalar: 3
---
description: mul_eint_int_cst
program: |
  func @main(%arg0: !FHE.eint<2>) -> !FHE.eint<2> {
    %0 = arith.constant 2 : i3
    %1 = "FHE.mul_eint_int"(%arg0, %0): (!FHE.eint<2>, i3) -> (!FHE.eint<2>)
    return %1: !FHE.eint<2>
  }
tests:
  - inputs:
    - scalar: 0
    outputs:
    - scalar: 0
  - inputs:
    - scalar: 1
    outputs:
    - scalar: 2
  - inputs:
    - scalar: 2
    outputs:
    - scalar: 4
  - inputs:
    - scalar: 2
    outputs:
    - scalar: 4
---
description: mul_eint_int_arg
program: |
  func @main(%arg0: !FHE.eint<2>, %arg1: i3) -> !FHE.eint<2> {
    %1 = "FHE.mul_eint_int"(%arg0, %arg1): (!FHE.eint<2>, i3) -> (!FHE.eint<2>)
    return %1: !FHE.eint<2>
  }
tests:
  - inputs:
    - scalar: 0
    - scalar: 2
    outputs:
    - scalar: 0
  - inputs:
    - scalar: 1
    - scalar: 2
    outputs:
    - scalar: 2
  - inputs:
    - scalar: 2
    - scalar: 2
    outputs:
    - scalar: 4
---
description: add_eint
program: |
  func @main(%arg0: !FHE.eint<7>, %arg1: !FHE.eint<7>) -> !FHE.eint<7> {
    %1 = "FHE.add_eint"(%arg0, %arg1): (!FHE.eint<7>, !FHE.eint<7>) -> (!FHE.eint<7>)
    return %1: !FHE.eint<7>
  }
tests:
  - inputs:
    - scalar: 1
    - scalar: 2
    outputs:
    - scalar: 3
  - inputs:
    - scalar: 4
    - scalar: 5
    outputs:
    - scalar: 9
  - inputs:
    - scalar: 1
    - scalar: 1
    outputs:
    - scalar: 2
---
description: apply_lookup_table_1_bits
program: |
  func @main(%arg0: !FHE.eint<1>) -> !FHE.eint<1> {
      %tlu = arith.constant dense<[0, 1]> : tensor<2xi64>
      %1 = "FHE.apply_lookup_table"(%arg0, %tlu): (!FHE.eint<1>, tensor<2xi64>) -> (!FHE.eint<1>)
   return %1: !FHE.eint<1>
  }
tests:
  - inputs:
    - scalar: 0
    outputs:
    - scalar: 0
  - inputs:
    - scalar: 1
    outputs:
    - scalar: 1
---
description: apply_lookup_table_2_bits
program: |
  func @main(%arg0: !FHE.eint<2>) -> !FHE.eint<2> {
      %tlu = arith.constant dense<[0, 1, 2, 3]> : tensor<4xi64>
      %1 = "FHE.apply_lookup_table"(%arg0, %tlu): (!FHE.eint<2>, tensor<4xi64>) -> (!FHE.eint<2>)
   return %1: !FHE.eint<2>
  }
tests:
  - inputs:
    - scalar: 0
    outputs:
    - scalar: 0
  - inputs:
    - scalar: 2
    outputs:
    - scalar: 2
  - inputs:
    - scalar: 3
    outputs:
    - scalar: 3
---
description: apply_lookup_table_3_bits
program: |
  func @main(%arg0: !FHE.eint<3>) -> !FHE.eint<3> {
      %tlu = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7]> : tensor<8xi64>
      %1 = "FHE.apply_lookup_table"(%arg0, %tlu): (!FHE.eint<3>, tensor<8xi64>) -> (!FHE.eint<3>)
   return %1: !FHE.eint<3>
  }
tests:
  - inputs:
    - scalar: 0
    outputs:
    - scalar: 0
  - inputs:
    - scalar: 7
    outputs:
    - scalar: 7
  - inputs:
    - scalar: 2
    outputs:
    - scalar: 2
---
description: apply_lookup_table_4_bits
program: |
  func @main(%arg0: !FHE.eint<4>) -> !FHE.eint<4> {
      %tlu = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]> : tensor<16xi64>
      %1 = "FHE.apply_lookup_table"(%arg0, %tlu): (!FHE.eint<4>, tensor<16xi64>) -> (!FHE.eint<4>)
   return %1: !FHE.eint<4>
  }
tests:
  - inputs:
    - scalar: 0
    outputs:
    - scalar: 0
  - inputs:
    - scalar: 15
    outputs:
    - scalar: 15
  - inputs:
    - scalar: 12
    outputs:
    - scalar: 12
---
description: apply_lookup_table_5_bits
program: |
  func @main(%arg0: !FHE.eint<5>) -> !FHE.eint<5> {
      %tlu = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]> : tensor<32xi64>
      %1 = "FHE.apply_lookup_table"(%arg0, %tlu): (!FHE.eint<5>, tensor<32xi64>) -> (!FHE.eint<5>)
   return %1: !FHE.eint<5>
  }
tests:
  - inputs:
    - scalar: 0
    outputs:
    - scalar: 0
  - inputs:
    - scalar: 31
    outputs:
    - scalar: 31
  - inputs:
    - scalar: 23
    outputs:
    - scalar: 23
---
description: apply_lookup_table_6_bits
program: |
  func @main(%arg0: !FHE.eint<6>) -> !FHE.eint<6> {
      %tlu = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]> : tensor<64xi64>
      %1 = "FHE.apply_lookup_table"(%arg0, %tlu): (!FHE.eint<6>, tensor<64xi64>) -> (!FHE.eint<6>)
   return %1: !FHE.eint<6>
  }
tests:
  - inputs:
    - scalar: 0
    outputs:
    - scalar: 0
  - inputs:
    - scalar: 63
    outputs:
    - scalar: 63
  - inputs:
    - scalar: 59
    outputs:
    - scalar: 59
---
description: apply_lookup_table_7_bits
program: |
  func @main(%arg0: !FHE.eint<7>) -> !FHE.eint<7> {
      %tlu = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127]> : tensor<128xi64>
      %1 = "FHE.apply_lookup_table"(%arg0, %tlu): (!FHE.eint<7>, tensor<128xi64>) -> (!FHE.eint<7>)
   return %1: !FHE.eint<7>
  }
tests:
  - inputs:
    - scalar: 0
    outputs:
    - scalar: 0
  - inputs:
    - scalar: 127
    outputs:
    - scalar: 127
  - inputs:
    - scalar: 96
    outputs:
    - scalar: 96
---
description: apply_lookup_table_8_bits
program: |
  func @main(%arg0: !FHE.eint<8>) -> !FHE.eint<8> {
      %tlu = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]> : tensor<256xi64>
      %1 = "FHE.apply_lookup_table"(%arg0, %tlu): (!FHE.eint<8>, tensor<256xi64>) -> (!FHE.eint<8>)
   return %1: !FHE.eint<8>
  }
tests:
  - inputs:
    - scalar: 0
    outputs:
    - scalar: 0
  - inputs:
    - scalar: 255
    outputs:
    - scalar: 255
  - inputs:
    - scalar: 96
    outputs:
    - scalar: 96
---
description: apply_lookup_table_multiple_precision
program: |
  func @main(%arg0: !FHE.eint<6>, %arg1: !FHE.eint<3>) -> !FHE.eint<6> {
     %tlu_7 = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]> : tensor<64xi64>
     %tlu_3 = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 7]> : tensor<8xi64>
     %a = "FHE.apply_lookup_table"(%arg0, %tlu_7): (!FHE.eint<6>, tensor<64xi64>) -> (!FHE.eint<6>)
     %b = "FHE.apply_lookup_table"(%arg1, %tlu_3): (!FHE.eint<3>, tensor<8xi64>) -> (!FHE.eint<6>)
     %a_plus_b = "FHE.add_eint"(%a, %b): (!FHE.eint<6>, !FHE.eint<6>) -> (!FHE.eint<6>)
     return %a_plus_b: !FHE.eint<6>
  }
tests:
  - inputs:
    - scalar: 23
    - scalar: 7
    outputs:
    - scalar: 30
---
description: apply_lookup_table_random_func
program: |
  func @main(%arg0: !FHE.eint<6>) -> !FHE.eint<6> {
     %tlu = arith.constant dense<[16, 91, 16, 83, 80, 74, 21, 96, 1, 63, 49, 122, 76, 89, 74, 55, 109, 110, 103, 54, 105, 14, 66, 47, 52, 89, 7, 10, 73, 44, 119, 92, 25, 104, 123, 100, 108, 86, 29, 121, 118, 52, 107, 48, 34, 37, 13, 122, 107, 48, 74, 59, 96, 36, 50, 55, 120, 72, 27, 45, 12, 5, 96, 12]> : tensor<64xi64>
     %1 = "FHE.apply_lookup_table"(%arg0, %tlu): (!FHE.eint<6>, tensor<64xi64>) -> (!FHE.eint<6>)
     return %1: !FHE.eint<6>
  }
tests:
  - inputs:
    - scalar: 5
    outputs:
    - scalar: 74
  - inputs:
    - scalar: 62
    outputs:
    - scalar: 96
  - inputs:
    - scalar: 0
    outputs:
    - scalar: 16
  - inputs:
    - scalar: 63
    outputs:
    - scalar: 12
